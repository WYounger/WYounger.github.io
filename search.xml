<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[9--动态SQLr-foreach]]></title>
    <url>%2F2019%2F08%2F31%2FMybaits%2F9---%E5%8A%A8%E6%80%81SQL--foreach%2F</url>
    <content type="text"><![CDATA[foreach需要注意一点的是:collection为set list array时，index为集合的下标, item为元素值collection为map时，index为key,item为valuedao 1List&lt;Student&gt; listStudents(List&lt;Integer&gt; list); mapper 12345678&lt;select id="listStudents" resultMap="studentMapper"&gt; select * from `student` where `id` in &lt;foreach collection="list" item="value" index="indexOrKey" open="(" separator="," close=")"&gt; #&#123;value&#125; &lt;/foreach&gt; &lt;/select&gt; test 12345678910111213141516171819202122@Testpublic void test() &#123; SqlSession session = factory.openSession(); try &#123; StudentMapper studentMapper = session.getMapper(StudentMapper.class); List&lt;Integer&gt; listIds = new ArrayList&lt;&gt;(); listIds.add(1000); listIds.add(10001); List&lt;Student&gt; students = studentMapper.listStudents(listIds); if(!students.isEmpty())&#123; for (Student student: students) &#123; System.out.println(student); &#125; &#125;else&#123; System.out.println("没有查到结果!"); &#125; &#125; finally &#123; session.commit(); session.close(); &#125;&#125;]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[8-动态SQLr-set]]></title>
    <url>%2F2019%2F08%2F31%2FMybaits%2F8---%E5%8A%A8%E6%80%81SQL--set%2F</url>
    <content type="text"><![CDATA[set ifdao 1int updateStudent(Student student); mapper 123456789101112131415&lt;update id="updateStudent" parameterType="student"&gt; update `student` &lt;set&gt; &lt;if test="name != null"&gt; `name` = #&#123;name&#125;, &lt;/if&gt; &lt;if test="age != null"&gt; `age` = #&#123;age&#125;, &lt;/if&gt; &lt;if test="gender != null"&gt; `gender` = #&#123;gender,typeHandler=genderTypeHandler&#125; &lt;/if&gt; &lt;/set&gt; where `id` = #&#123;id&#125; &lt;/update&gt; test 12345678910111213141516171819@Testpublic void test() &#123; SqlSession session = factory.openSession(); try &#123; StudentMapper studentMapper = session.getMapper(StudentMapper.class); int id = 10001; String name = "hu"; int age = 18; GenderEnum gender = GenderEnum.getGender(1); Student student = new Student(id,name,age,gender); int affectedRows = studentMapper.updateStudent(student); System.out.println(affectedRows); System.out.println(studentMapper.selectStudentById(id)); &#125; finally &#123; session.commit(); session.close(); &#125;&#125;]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[7--动态SQLr-where]]></title>
    <url>%2F2019%2F08%2F31%2FMybaits%2F7---%E5%8A%A8%E6%80%81SQL--where%2F</url>
    <content type="text"><![CDATA[where ifdao在含有int类型的查询参数，最好设置为Integer,以便接收null值 123List&lt;Student&gt; selectStudents(@Param("name") String name, @Param("age") Integer age, @Param("gender") GenderEnum gender); mapper 1234567891011121314&lt;select id="selectStudents" resultMap="studentMapper"&gt; select * from `student` &lt;where&gt; &lt;if test="name != null"&gt; `name` like concat('%',#&#123;name&#125;,'%') &lt;/if&gt; &lt;if test="age != null"&gt; and `age` = #&#123;age&#125; &lt;/if&gt; &lt;if test="gender != null"&gt; and `gender` = #&#123;gender,typeHandler=genderTypeHandler&#125; &lt;/if&gt; &lt;/where&gt; &lt;/select&gt; test 1234567891011121314151617181920212223242526272829@Test public void test() &#123; SqlSession session = factory.openSession(); try &#123; StudentMapper studentMapper = session.getMapper(StudentMapper.class);// Student student = new Student("hu",19,GenderEnum.getGender(1));// int affectedRows = studentMapper.insertStudent(student); String name = "h"; int age = 20; GenderEnum gender = GenderEnum.getGender(2); List&lt;Student&gt; students = studentMapper.selectStudents(name, age,gender);// List&lt;Student&gt; students = studentMapper.selectStudents(name, age,null);// List&lt;Student&gt; students = studentMapper.selectStudents(name, null,gender);// List&lt;Student&gt; students = studentMapper.selectStudents(name, null,null);// List&lt;Student&gt; students = studentMapper.selectStudents(null, null,null); if(!students.isEmpty())&#123; Iterator&lt;Student&gt; it = students.iterator(); while(it.hasNext())&#123; Student student = it.next(); System.out.println(student); &#125; &#125;else&#123; System.out.println("没有查到结果"); &#125; &#125; finally &#123; session.commit(); session.close(); &#125; &#125;]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[6--TypeHandler-2]]></title>
    <url>%2F2019%2F08%2F31%2FMybaits%2F6---TypeHandler-2%2F</url>
    <content type="text"><![CDATA[本小节对枚举类型进行转换table 123456create table `student`(`id` int auto_increment primary key,`name` varchar(30) not null,`age` int,`gender` int default 0)auto_increment=10000; enum 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152package model;public enum GenderEnum &#123; MALE("男",0),FEMALE("女",1),UNKNOW("不知道",2); private String gender; private int code; GenderEnum(String gender, int code)&#123; this.gender = gender; this.code = code; &#125; public static GenderEnum getGender(String genderName)&#123; for (GenderEnum gender: GenderEnum.values())&#123; if(gender.gender.equalsIgnoreCase(genderName))&#123; return gender; &#125; &#125; return null; &#125; public static GenderEnum getGender(int code)&#123; for (GenderEnum gender: GenderEnum.values())&#123; if(gender.code == code)&#123; return gender; &#125; &#125; return null; &#125; public String getGender() &#123; return gender; &#125; public void setGender(String gender) &#123; this.gender = gender; &#125; public int getCode() &#123; return code; &#125; public void setCode(int code) &#123; this.code = code; &#125; @Override public String toString() &#123; return "GenderEnum&#123;" + "gender='" + gender + '\'' + ", code=" + code + '&#125;'; &#125;&#125; model 12345678910111213package model;public class Student &#123; private int id; private String name; private int age; private GenderEnum gender; public Student() &#123; &#125; //getter setter &#125; dao 1234public interface StudentMapper &#123; int insertStudent(Student student); Student selectStudentById(int id);&#125; mapper这里的typeHandler使用了别名 123456789101112131415161718&lt;insert id="insertStudent" parameterType="student"&gt; insert into `student`(`name`,`age`,`gender`) values(#&#123;name&#125;,#&#123;age&#125;,#&#123;gender,typeHandler=genderTypeHandler&#125;) &lt;selectKey resultType="int" keyColumn="id" keyProperty="id" order="AFTER"&gt; select last_insert_id(); &lt;/selectKey&gt; &lt;/insert&gt; &lt;resultMap id="studentMapper" type="student"&gt; &lt;id property="id" column="id"/&gt; &lt;result property="name" column="name"/&gt; &lt;result property="age" column="age"/&gt; &lt;result property="gender" column="gender" typeHandler="genderTypeHandler"/&gt; &lt;/resultMap&gt; &lt;select id="selectStudentById" parameterType="int" resultMap="studentMapper"&gt; select * from `student` where `id` = #&#123;id&#125; &lt;/select&gt; test 12]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[5--TypeHandler-1]]></title>
    <url>%2F2019%2F08%2F31%2FMybaits%2F5---TypeHandler-1%2F</url>
    <content type="text"><![CDATA[当需要将jdbc类型的数据和Java程序中类型的书数据进行转换时，可以使用TypeHandler来完成转换过程。怎么实现呢?Java类型==》jdbc将Java类型值value1通过某种策略转化为数据库(jdbc)类型值value2，然后将value2设置为SQL参数 :preparedStatement.setType(i,value2);Java类型《== jdbc从resultSet中取出值value2，然后通过某种策略将value2转换为Java类型值value1 table123456create table `student`(`id` int auto_increment primary key,`name` varchar(30) not null,`age` int,`birthday` varchar(30))auto_increment=10000; model123456789101112131415package model;import java.util.Date;public class Student &#123; private int id; private String name; private int age; private Date birthday;//在数据库中对应的类型是varchar(n) public Student() &#123; &#125;//getter和setter略&#125; TypeHandler123456789101112131415161718192021222324252627//表注转换的两种类型@MappedJdbcTypes(&#123;JdbcType.VARCHAR&#125;)//jdbc类型@MappedTypes(&#123;java.util.Date.class&#125;)//程序类型public class MyDateTypeHandler extends BaseTypeHandler&lt;Date&gt; &#123; @Override public void setNonNullParameter(PreparedStatement preparedStatement, int i, Date date, JdbcType jdbcType) throws SQLException &#123; preparedStatement.setString(i,String.valueOf(date.getTime())); &#125; @Override public Date getNullableResult(ResultSet resultSet, int i) throws SQLException &#123; return new Date(resultSet.getLong(i)); &#125; @Override public Date getNullableResult(ResultSet resultSet, String s) throws SQLException &#123; return new Date(resultSet.getLong(s)); &#125; @Override public Date getNullableResult(CallableStatement callableStatement, int i) throws SQLException &#123; return new Date(callableStatement.getLong(i)); &#125;&#125; dao12345678910package dao;import model.Student;public interface StudentMapper &#123; int insertStudent(Student student); Student selectStudentById(int id);&#125; mapper在对应参数处使用typeHandler来转换作为输入参数:#{birthday,typeHandler=dao.MyDateTypeHandler}这里的typeHandler的值不成写成字符串类型作为输出结果:&lt;result property=&quot;birthday&quot; column=&quot;birthday&quot; typeHandler=&quot;dao.MyDateTypeHandler&quot;/&gt; 123456789101112131415161718&lt;insert id="insertStudent" parameterType="student"&gt; insert into `student`(`name`,`age`,`birthday`) values(#&#123;name&#125;,#&#123;age&#125;,#&#123;birthday,typeHandler=dao.MyDateTypeHandler&#125;) &lt;selectKey resultType="int" keyProperty="id" keyColumn="id" order="AFTER"&gt; select last_insert_id() &lt;/selectKey&gt; &lt;/insert&gt; &lt;resultMap id="studentMapper" type="student"&gt; &lt;id property="id" column="id"/&gt; &lt;result property="name" column="name"/&gt; &lt;result property="age" column="age"/&gt; &lt;result property="birthday" column="birthday" typeHandler="dao.MyDateTypeHandler"/&gt; &lt;/resultMap&gt; &lt;select id="selectStudentById" parameterType="int" resultMap="studentMapper"&gt; select * from `student` where `id` = #&#123;id&#125; &lt;/select&gt; test1234567891011121314151617181920212223242526272829public class AppTest &#123; SqlSessionFactory factory = null; @Before public void prepare() throws IOException&#123; InputStream inputStream = Resources.getResourceAsStream("mybatis.xml"); factory = new SqlSessionFactoryBuilder().build(inputStream); inputStream.close(); &#125; @Test public void test()&#123; SqlSession session = factory.openSession(); try&#123; StudentMapper studentMapper = session.getMapper(StudentMapper.class);// Student student = new Student("wang",20,new Date());// int affectedRows = studentMapper.insertStudent(student); int id=10001; Student student = studentMapper.selectStudentById(id); System.out.println(student); &#125;finally&#123; session.commit(); session.close(); &#125; &#125;&#125;]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[4--一对一]]></title>
    <url>%2F2019%2F08%2F31%2FMybaits%2F4---%E5%85%B3%E8%81%94%E6%9F%A5%E8%AF%A2~%E4%B8%80%E5%AF%B9%E4%B8%80%2F</url>
    <content type="text"><![CDATA[一本书只属于一个人!table 123456789101112create table `student`(`id` int auto_increment primary key,`name` varchar(30) not null,`age` int)auto_increment=10000;create table `book`(`id` int auto_increment primary key,`bookName` varchar(20),`author` varchar(10),`studentID` int references `student`(`id`))auto_increment=10000; model 123456789101112131415161718192021public class Student &#123; private int id; private String name; private int age; public Student()&#123;&#125; //getter setter略&#125;public class Book &#123; private int bookID; private String bookName; private String author; private Student student; public Book() &#123; &#125; //getter setter略&#125; dao 123public interface StudentMapper &#123; Book findBook(int bookID);&#125; mapper.xml方式一：嵌套 12345678910111213141516171819202122&lt;resultMap id="bookMapper" type="book"&gt; &lt;id column="bookID" property="bookID"/&gt; &lt;result column="bookName" property="bookName"/&gt; &lt;result column="author" property="author"/&gt; &lt;association property="student" javaType="student"&gt; &lt;id column="id" property="id"/&gt; &lt;result column="name" property="name"/&gt; &lt;result column="age" property="age"/&gt; &lt;/association&gt;&lt;/resultMap&gt;&lt;select id="findBook" resultMap="bookMapper"&gt; select `student`.`id` `id`,`student`.`name` `name`, `student`.`age` `age`, `book`.`id` `bookID`, `book`.`bookName` `bookName`, `book`.`author` `author` from `student`,`book` where `student`.`id` = `book`.`studentID` and `book`.`id` = #&#123;bookID&#125;;&lt;/select&gt; 方式二:复用resultMapper 123456789101112131415161718192021222324 &lt;select id="findBook" resultMap="bookMapper"&gt; select `student`.`id` `id`, `student`.`name` `name`, `student`.`age` `age`, `book`.`id` `bookID`, `book`.`bookName` `bookName`, `book`.`author` `author` from `student`,`book` where `student`.`id` = `book`.`studentID` and `book`.`id` = #&#123;bookID&#125;; &lt;/select&gt;&lt;resultMap id="studentMapper" type="student"&gt; &lt;id column="id" property="id"/&gt; &lt;result column="name" property="name"/&gt; &lt;result column="age" property="age"/&gt; &lt;/resultMap&gt; &lt;resultMap id="bookMapper" type="book"&gt; &lt;id column="bookID" property="bookID"/&gt; &lt;result column="bookName" property="bookName"/&gt; &lt;result column="author" property="author"/&gt; &lt;association property="student" resultMap="studentMapper"/&gt; &lt;/resultMap&gt; 综合3、4关联查询两篇文章，总结一下1.明确实体之间的关系，优化范式，构建表2.依据业务，构建model3.编写关联查询语句 首先编写简单的model开始，建议使用resutlMap来映射，因为当SQL复杂时，嵌套很容易出错。然后依据一对一association或一对多collection来创建复杂实体。最后编写关联查询语句，注意返回字段的名称。需要注意两点: resultMap中的column属性必须和数据库返回字段相同 resultMap中的property属性必须和Model的成员属性相同]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[3--关联查询~一对多]]></title>
    <url>%2F2019%2F08%2F31%2FMybaits%2F3---%E5%85%B3%E8%81%94%E6%9F%A5%E8%AF%A2~%E4%B8%80%E5%AF%B9%E5%A4%9A%2F</url>
    <content type="text"><![CDATA[本小节将要介绍一对一、一对多的查询【技术上】。你有可能会问，多对多怎么查，这个问题就不该问！开玩笑的，哈哈。其实在设计表时，一般多对多的关系就已经转化为一对多了。 ###一对多就用一个学生有多本书籍来举例子吧!table 123456789101112create table `student`(`id` int auto_increment primary key,`name` varchar(30) not null,`age` int)auto_increment=10000;create table `book`(`id` int auto_increment primary key,`bookName` varchar(20),`author` varchar(10),`studentID` int references `student`(`id`))auto_increment=10000; model 123456789101112131415161718192021public class Student &#123; private int id; private String name; private int age; private List&lt;Book&gt; books; public Student() &#123;//无参构造函数===&gt;创建对象 &#125;//getter和setter略&#125;public class Book &#123; private int bookID; private String bookName; private String author; public Book() &#123; &#125;&#125;//getter和setter略 dao 123public interface StudentMapper &#123; Student findMyBooks(int id);&#125; mapple.xml方式一，直接嵌套 12345678910111213141516171819202122&lt;select id="findMyBooks" resultMap="studentMapper"&gt; select `student`.`id` `id`,`student`.`name` `name`, `student`.`age` `age`, `book`.`id` `bookID`, `book`.`bookName` `bookName`, `book`.`author` `author` from `student`,`book` where `student`.`id` = `book`.`studentID` and `student`.`id` = #&#123;id&#125;&lt;/select&gt;&lt;resultMap id="studentMapper" type="student"&gt; &lt;id property="id" column="id"/&gt; &lt;result property="name" column="name"/&gt; &lt;result property="age" column="age"/&gt; &lt;collection property="books" ofType="book"&gt; &lt;id property="bookID" column="bookID"/&gt; &lt;result property="bookName" column="bookName"/&gt; &lt;result property="author" column="author"/&gt; &lt;/collection&gt;&lt;/resultMap&gt; 方式二：resultMap复用 123456789101112131415161718192021222324&lt;select id="findMyBooks" resultMap="studentMapper"&gt; select `student`.`id` `id`,`student`.`name` `name`, `student`.`age` `age`, `book`.`id` `bookID`, `book`.`bookName` `bookName`, `book`.`author` `author` from `student`,`book` where `student`.`id` = `book`.`studentID` and `student`.`id` = #&#123;id&#125;&lt;/select&gt;&lt;resultMap id="bookMapper" type="book"&gt; &lt;id property="bookID" column="bookID"/&gt; &lt;result property="bookName" column="bookName"/&gt; &lt;result property="author" column="author"/&gt;&lt;/resultMap&gt;&lt;resultMap id="studentMapper" type="student"&gt; &lt;id property="id" column="id"/&gt; &lt;result property="name" column="name"/&gt; &lt;result property="age" column="age"/&gt; &lt;collection property="books" resultMap="bookMapper"/&gt;&lt;/resultMap&gt; 关联查询必须用无参构造函数来创建对象，如果没有无参构造函数，就会报构造函数参数错误。希望能引起你的警觉。]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[1--基本CRUD]]></title>
    <url>%2F2019%2F08%2F31%2FMybaits%2F2---%E5%9F%BA%E6%9C%ACCURD%2F</url>
    <content type="text"><![CDATA[dao 123456789101112131415161718package dao;import model.Student;import java.util.List;public interface StudentMapper &#123; List&lt;Student&gt; selectAllStudent(); int insertStudent(Student student); int updateStudent(Student student); int deleteById(int id);&#125;​` mapple.xml 123456789101112131415161718192021222324252627&lt;?xml version="1.0" encoding="UTF-8" ?&gt;&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;&lt;mapper namespace="dao.StudentMapper"&gt; &lt;select id="selectAllStudent" resultType="student"&gt; select * from `student` &lt;/select&gt; &lt;insert id="insertStudent" parameterType="student"&gt; insert into `student`(`name`,`age`) values(#&#123;name&#125;,#&#123;age&#125;) &lt;selectKey resultType="int" keyColumn="id" keyProperty="id" order="AFTER"&gt; select last_insert_id(); &lt;/selectKey&gt; &lt;/insert&gt; &lt;update id="updateStudent" parameterType="student"&gt; update `student` set `name` = #&#123;name&#125;,`age` = #&#123;age&#125; where `id` = #&#123;id&#125; &lt;/update&gt; &lt;delete id="deleteById" parameterType="int"&gt; delete from `student` where `id` = #&#123;id&#125; &lt;/delete&gt;&lt;/mapper&gt; 测试 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101import dao.StudentMapper;import model.Student;import org.apache.ibatis.io.Resources;import org.apache.ibatis.session.SqlSession;import org.apache.ibatis.session.SqlSessionFactory;import org.apache.ibatis.session.SqlSessionFactoryBuilder;import org.junit.Before;import org.junit.Test;import java.io.IOException;import java.io.InputStream;import java.util.Iterator;import java.util.List;public class AppTest &#123; SqlSessionFactory factory = null; @Before public void prepare() throws IOException&#123; InputStream inputStream = Resources.getResourceAsStream("mybatis.xml"); factory = new SqlSessionFactoryBuilder().build(inputStream); inputStream.close(); &#125; @Test public void test()&#123; SqlSession session= factory.openSession(); try&#123; StudentMapper studentMapper = session.getMapper(StudentMapper.class); List&lt;Student&gt; list = studentMapper.selectAllStudent(); Iterator&lt;Student&gt; iterator = list.iterator(); while(iterator.hasNext())&#123; Student student = iterator.next(); System.out.println(student); &#125; &#125;finally&#123; session.commit(); session.close(); &#125; &#125; @Test public void testInsert()&#123; SqlSession sqlSession = factory.openSession(); try&#123; StudentMapper studentMapper = sqlSession.getMapper(StudentMapper.class); Student student = new Student("young",20); int affectedRows = studentMapper.insertStudent(student); if(affectedRows==1)&#123; System.out.println("插入成功!"); System.out.println(student);//查看从数据库返回id填充student的id属性 &#125;else&#123; System.out.println("插入失败!"); &#125; &#125;finally &#123; sqlSession.commit(); sqlSession.close(); &#125; &#125; @Test public void testUpdate()&#123; SqlSession sqlSession = factory.openSession(); try&#123; StudentMapper studentMapper = sqlSession.getMapper(StudentMapper.class); Student student = new Student(10000,"Tom",21); int affectedRows = studentMapper.updateStudent(student); if(affectedRows != 0)&#123; System.out.println("更新成功!"); System.out.println(student); &#125;else&#123; System.out.println("更新失败"); &#125; &#125;finally &#123; sqlSession.commit(); sqlSession.close(); &#125; &#125; @Test public void testDelete()&#123; SqlSession sqlSession = factory.openSession(); try&#123; StudentMapper studentMapper = sqlSession.getMapper(StudentMapper.class); int id = 10000; int affectedRows = studentMapper.deleteById(id); if(affectedRows == 1)&#123; System.out.println("删除成功!"); &#125;else&#123; System.out.println("删除失败!"); &#125; &#125;finally &#123; sqlSession.commit(); sqlSession.close(); &#125; &#125;&#125; 注意 插入、删除、修改要获取数据库中受影响的记录数，以便验证操作是否成功 插入一条数据最好返回从数据库返回生成的ID来给model的id赋值，以便后续使用 ```]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[1--搭建环境]]></title>
    <url>%2F2019%2F08%2F31%2FMybaits%2F1---%E6%90%AD%E5%BB%BA%E7%8E%AF%E5%A2%83%2F</url>
    <content type="text"><![CDATA[####一.单独使用Mybaitsjar包测试:junit数据库驱动: mysql-connector-javaMybatis: mybatislog4j: log4j-core log4j-api1.创建db,properties 1234database.driver=com.mysql.jdbc.Driverdatabase.url=jdbc:mysql://localhost:3306/dbName?serverTimezone=UTC database.username=rootdatabase.password=*** 2.配置mybatis.xml 12345678910111213141516171819202122232425262728293031323334&lt;?xml version="1.0" encoding="UTF-8" ?&gt;&lt;!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;&lt;configuration&gt; &lt;!--要注意该文件的节点顺序，否则会报错--&gt; &lt;!--引入属性文件--&gt; &lt;properties resource="db.properties"/&gt; &lt;settings&gt; &lt;!--配置日志,固定写法--&gt; &lt;setting name="logImpl" value="LOG4J2"&gt;&lt;/setting&gt; &lt;/settings&gt; &lt;!--给实体取别名--&gt; &lt;typeAliases&gt; &lt;package name="dao"/&gt; &lt;package name="model"/&gt; &lt;/typeAliases&gt; &lt;!--数据源配置--&gt; &lt;environments default="development"&gt; &lt;environment id="development"&gt; &lt;transactionManager type="JDBC"/&gt; &lt;dataSource type="POOLED"&gt; &lt;property name="driver" value="$&#123;database.driver&#125;"/&gt; &lt;property name="url" value="$&#123;database.url&#125;"/&gt; &lt;property name="username" value="$&#123;database.username&#125;"/&gt; &lt;property name="password" value="$&#123;database.password&#125;"/&gt; &lt;/dataSource&gt; &lt;/environment&gt; &lt;/environments&gt; &lt;!--引入mapple文件--&gt; &lt;mappers &gt; &lt;mapper resource="mapple/studentMapple.xml"/&gt; &lt;/mappers&gt;&lt;/configuration&gt; 3.日志 1234567891011121314151617&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;Configuration status="WARN"&gt; &lt;Appenders&gt; &lt;Console name="console" target="SYSTEM_OUT"&gt; &lt;PatternLayout pattern="%d&#123;HH:mm:ss&#125; [%t] %-5level %logger&#123;36&#125; - %msg%n"/&gt; &lt;/Console&gt; &lt;/Appenders&gt; &lt;Loggers&gt; &lt;!--过滤掉spring和mybatis的一些无用的DEBUG信息--&gt; &lt;logger name="org.springframework" level="INFO"&gt;&lt;/logger&gt; &lt;logger name="org.mybatis" level="INFO"&gt;&lt;/logger&gt; &lt;root level="debug"&gt; &lt;appender-ref ref="console"/&gt; &lt;/root&gt; &lt;/Loggers&gt;&lt;/Configuration&gt; 4.dao和model 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859package dao;import model.Student;import java.util.List;public interface StudentMapper &#123; List&lt;Student&gt; selectAllStudent();&#125;package model;public class Student &#123; private int id; private String name; private int age; public Student() &#123; &#125; public Student(String name, int age) &#123; this.name = name; this.age = age; &#125; public int getId() &#123; return id; &#125; public void setId(int id) &#123; this.id = id; &#125; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; public int getAge() &#123; return age; &#125; public void setAge(int age) &#123; this.age = age; &#125; @Override public String toString() &#123; return "Student&#123;" + "id=" + id + ", name='" + name + '\'' + ", age=" + age + '&#125;'; &#125;&#125; 5.mapple 12345678910&lt;?xml version="1.0" encoding="UTF-8" ?&gt;&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;&lt;mapper namespace="dao.StudentMapper"&gt; &lt;select id="selectAllStudent" resultType="student"&gt; select * from `student` &lt;/select&gt;&lt;/mapper&gt; 6.测试 1234567891011121314151617181920212223242526272829303132333435363738394041424344import dao.StudentMapper;import model.Student;import org.apache.ibatis.io.Resources;import org.apache.ibatis.session.SqlSession;import org.apache.ibatis.session.SqlSessionFactory;import org.apache.ibatis.session.SqlSessionFactoryBuilder;import org.junit.Before;import org.junit.Test;import java.io.IOException;import java.io.InputStream;import java.util.Iterator;import java.util.List;public class AppTest &#123; SqlSessionFactory factory = null; @Before public void prepare() throws IOException&#123; InputStream inputStream = Resources.getResourceAsStream("mybatis.xml"); factory = new SqlSessionFactoryBuilder().build(inputStream); inputStream.close(); &#125; @Test public void test()&#123; SqlSession session= factory.openSession(); try&#123; StudentMapper studentMapper = session.getMapper(StudentMapper.class); List&lt;Student&gt; list = studentMapper.selectAllStudent(); Iterator&lt;Student&gt; iterator = list.iterator(); while(iterator.hasNext())&#123; Student student = iterator.next(); System.out.println(student); &#125; &#125;finally&#123; session.commit(); session.close(); &#125; &#125;&#125;]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
  </entry>
</search>
